<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Hegzploit</title><link>https://hegzploit.github.io/</link><description>Recent content on Hegzploit</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>me AT this domain (Yusuf Hegazy)</managingEditor><webMaster>me AT this domain (Yusuf Hegazy)</webMaster><copyright>©2024, All Rights Reserved</copyright><lastBuildDate>Sun, 03 Dec 2023 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://hegzploit.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Low Budget Router</title><link>https://hegzploit.github.io/posts/lbr/</link><pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 03 Dec 2023 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/lbr/</guid><description>&lt;p>In this blog post, we&amp;rsquo;ll explore three challenges from the &amp;ldquo;Not Vulnerability Research&amp;rdquo; category in CyCTF'23, held in Cairo ICT.&lt;/p>
&lt;p>I managed to solve the first challenge during the CTF, and solved the remaining two afterwards. Be sure to check out &lt;a href="https://wr3nchsr.github.io/cyctf-low-budget-router-trilogy-writeup/">the official writeup by the author&lt;/a>. As of writing this, I haven&amp;rsquo;t read the author&amp;rsquo;s writeup to avoid being influenced by the intended solutions. Instead, I&amp;rsquo;ll guide you through my methodology and approach for solving these three challenges. Expect a long (but fun) ride, so prepare a cup of tea and enjoy the read!&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/lbr.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>hardware</category></item><item><title>Reactive Vault 1</title><link>https://hegzploit.github.io/posts/reactive-vault-1/</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 05 Nov 2023 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/reactive-vault-1/</guid><description>&lt;p>I started by installing the APK on an android phone, once opened it will show a text field to enter a key and a login button, the APK will try to navigate to &lt;code>https://you-shall-not-pass&lt;/code> when trying to type any key (maybe this was done to prevent bruteforcing the key?), finally, when you try to login with a random key It will show a dialog saying &amp;ldquo;BAAAD Key&amp;rdquo;&lt;/p>
&lt;center>
&lt;video controls loop width="320">
&lt;source src="./demo.mp4" type="video/mp4">
&lt;/video>
&lt;/center>
&lt;p>I dropped the APK within jadx and I went to the entry point which is &lt;code>com.expor4bb1t.AwesomeProject.MainActivity&lt;/code>, I could see a lot of imports related to facebook and react, which along with the challenge name, started making sense. This application is built with react native.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/reactive-vault.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>CTF</category></item><item><title>An Electrical Engineer's Adventure into the Deep Dark of AI</title><link>https://hegzploit.github.io/posts/gp/</link><pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 18 Jun 2023 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/gp/</guid><description>&lt;p>This is a blog post about my graduation project, where I went for a little dive within the scary realm of AI. I had zero practical experience with AI prior and had only a minimal theoretical understanding of some concepts. While this work may not seem like much, this was a rough ride for me, and I can confidently say that it was worth it. I couldn&amp;rsquo;t have had the opportunity to do this type of work otherwise, and I will probably not touch AI at this level anytime soon. This is basically a brain dump of some of my thoughts, including an explanation of my project so I can have some peace of mind and move on.&lt;br />
&lt;figure >
&lt;img data-src="https://hegzploit.github.io/images/posts/gp/honest_work.jpg" data-caption="" src="data:image/svg+xml,%0A%3Csvg xmlns='http://www.w3.org/2000/svg' width='500px' height='' viewBox='0 0 24 24'%3E%3Cpath fill='none' d='M0 0h24v24H0V0z'/%3E%3Cpath fill='%23aaa' d='M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-1 16H6c-.55 0-1-.45-1-1V6c0-.55.45-1 1-1h12c.55 0 1 .45 1 1v12c0 .55-.45 1-1 1zm-4.44-6.19l-2.35 3.02-1.56-1.88c-.2-.25-.58-.24-.78.01l-1.74 2.23c-.26.33-.02.81.39.81h8.98c.41 0 .65-.47.4-.8l-2.55-3.39c-.19-.26-.59-.26-.79 0z'/%3E%3C/svg%3E" class="lazyload" style="width:500px;height:;"/>
&lt;/figure>&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/gp.jpeg" medium="image"><media:title type="html">featured image</media:title></media:content><category>misc</category></item><item><title>Hacking the Hackathon: How We Optimized Our Way to Third Place</title><link>https://hegzploit.github.io/posts/hacking-the-hackathon/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Wed, 15 Mar 2023 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/hacking-the-hackathon/</guid><description>&lt;p>Are you ready to put your coding skills to the ultimate test? Hacktrick is the hackathon that combines AI, problem-solving, and cybersecurity to create a thrilling challenge. The landing page promises a rescue mission, but the real magic happens behind the scenes. As the competition heats up, we quickly realize that coding tricks alone won&amp;rsquo;t guarantee a win. The question is, will we figure out the winning formula before the time runs out?&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/dell.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>misc</category></item><item><title>Babiersteps</title><link>https://hegzploit.github.io/writeups/babiersteps/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/babiersteps/</guid><description>&lt;h2 id="checksec">Checksec&lt;/h2>
&lt;pre tabindex="0">&lt;code>Canary : ✘
NX : ✓
PIE : ✘
Fortify : ✘
RelRO : Full
&lt;/code>&lt;/pre>&lt;p>We only care about the stack canary as we will be overflowing RIP to control execution flow, and thankfully It&amp;rsquo;s disabled.&lt;/p>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;h3 id="1-rip-control">1. RIP Control&lt;/h3>
&lt;p>We overflow the binary with a cyclic pattern, however, for this being a 64-bit binary we can&amp;rsquo;t overflow RIP with a non-canonical address.&lt;/p>
&lt;div class="expand">
&lt;button type="button" class="expand__button" aria-label="Expand Button">
&lt;span class="expand-icon expand-icon__right">
&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">&lt;path fill="currentColor" d="M9.29 15.88L13.17 12 9.29 8.12c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0l4.59 4.59c.39.39.39 1.02 0 1.41L10.7 17.3c-.39.39-1.02.39-1.41 0-.38-.39-.39-1.03 0-1.42z"/>&lt;/svg>
&lt;/span>
Canonical Address
&lt;/button>
&lt;div class="expand__content">
An address is said to be canonical in the 64-bit world when the upper 16 bits are copies of the 48th bit.
&lt;/div>
&lt;/div>
&lt;p>The easiest way to find the RIP offset without overflowing RIP is by breaking at the &lt;code>ret&lt;/code> instruction and searching for our pattern in &lt;code>rsp&lt;/code>.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/babiersteps.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Babysteps</title><link>https://hegzploit.github.io/writeups/babysteps/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/babysteps/</guid><description>&lt;h2 id="checksec">Checksec&lt;/h2>
&lt;p>It&amp;rsquo;s an aboslute mess, nothing is turned on fortunately :)&lt;/p>
&lt;pre tabindex="0">&lt;code>Canary : ✘
NX : ✘
PIE : ✘
Fortify : ✘
RelRO : Partial
&lt;/code>&lt;/pre>&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;h3 id="1-eip-control">1. EIP Control&lt;/h3>
&lt;p>We obtain our offset very easily in GEF.&lt;br />
&lt;img src="https://hegzploit.github.io/writeups/babysteps/babysteps_offset.png" alt="">&lt;/p>
&lt;center>
&lt;p>&lt;img src="https://hegzploit.github.io/img/ach_offset.png" alt="">&lt;/p>
&lt;/center>
&lt;h3 id="2-exploitation">2. Exploitation&lt;/h3>
&lt;p>We start by analyzing the stack at the overflown state.&lt;br />
&lt;img src="https://hegzploit.github.io/writeups/babysteps/babysteps_stackstate.png" alt="">&lt;/p>
&lt;p>Looking at the registers, It appears that only two registers point to our stack. &lt;code>eax&lt;/code> and &lt;code>esp&lt;/code>.&lt;/p>
&lt;p>We search for gadgets jumping to any of these registers.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/babysteps.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Detour</title><link>https://hegzploit.github.io/writeups/detour/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/detour/</guid><description>&lt;h2 id="checksec">Checksec&lt;/h2>
&lt;pre tabindex="0">&lt;code>Canary : ✓
NX : ✓
PIE : ✘
Fortify : ✘
RelRO : ✘
&lt;/code>&lt;/pre>&lt;p>RelRO is completely disabled unlike any other challenge we have encountered, this means that we have write permessions to all the relocations.&lt;/p>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;p>Running the binary will let us specify an address and a value and then It will assign that value to the adderss we provided.&lt;/p>
&lt;pre tabindex="0">&lt;code>hegz@pop-os$ ./detour
What: 1234
Where: 123123123213
Segmentation fault (core dumped)
&lt;/code>&lt;/pre>&lt;p>I confirmed this by analyzing the binary in ghidra, below is the decompilation.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/detour.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Dweeno</title><link>https://hegzploit.github.io/writeups/dweeno/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/dweeno/</guid><description>&lt;details>
&lt;summary> Serial Output&lt;/summary>
&lt;pre tabindex="0">&lt;code>00110011
00111001
00110100
00110010
00101110
00110100
01100100
01100011
00110111
01101101
01100101
01100111
01100010
00110110
00110011
01100110
01100010
01100001
00110111
01100100
01100100
01100000
00110011
01100010
00110110
01100110
00110000
01100111
00110011
01100011
01100111
01100111
00110001
01101101
01100001
00110111
00110110
00101000
&lt;/code>&lt;/pre>&lt;/details>
&lt;details>
&lt;summary> Wiring Diagram&lt;/summary>
&lt;p>&lt;img src="https://hegzploit.github.io/writeups/dweeno/sketch.jpg" alt="">&lt;/p>
&lt;/details>
&lt;details>
&lt;summary> Arduino Code&lt;/summary>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;REDACTED&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">second&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">in1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">in2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">in3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">in4&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">out1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">53&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">51&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">49&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out4&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">47&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="nf">get_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">digitalWrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="nl">HIGH&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">LOW&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">digitalWrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="nl">HIGH&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">LOW&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">digitalWrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="nl">HIGH&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">LOW&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">digitalWrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="nl">HIGH&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">LOW&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digitalRead&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digitalRead&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digitalRead&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in3&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">digitalRead&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in4&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//converts a given number into binary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">binary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">setup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OUTPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OUTPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OUTPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OUTPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pinMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INPUT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Serial&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9600&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">loop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">second&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Serial&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Serial&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;p>Looking at the code we can break it down into a couple of steps:&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/dweeno.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category><category>Hardware</category></item><item><title>Fighting counterfeit USB Flash Drives</title><link>https://hegzploit.github.io/posts/counterfeit-usbs/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 10 Apr 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/counterfeit-usbs/</guid><description>&lt;h2 id="first-impressions">First Impressions&lt;/h2>
&lt;p>I was really tempted to just plug that bad boy into my main PC, but I was worried It might &lt;a href="https://en.wikipedia.org/wiki/USB_Killer">do something funny&lt;/a>, I didn&amp;rsquo;t rush and instead booted a trusy old HP Pavilion I had around and booted it up, and ran a quick &lt;code>lsblk&lt;/code> to list the devices connected.&lt;/p>
&lt;p>&lt;img src="https://hegzploit.github.io/posts/counterfeit-usbs/lsblk.jpg" alt="">&lt;/p>
&lt;p>We can clearly see that &lt;code>sdb1&lt;/code> with 1.9TBs of storage, but is that all?&lt;/p>
&lt;h2 id="digging-deeper">Digging Deeper&lt;/h2>
&lt;p>Fight Flash Fraud, or rather &lt;a href="https://github.com/AltraMayor/f3">f3&lt;/a>, is a suite of command line utilities that aids in detecting and verifying USB flash drives.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/thumbnails/badusb.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>Emotion and Logic</title><link>https://hegzploit.github.io/posts/emotion-vs-logic/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 27 Mar 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/emotion-vs-logic/</guid><description>&lt;p>A lot of people are driven by emotions, logical thinking doesn&amp;rsquo;t always result in agreement, in fact, most people are more influenced by emotions than logic, does that make logical thinking uselss.&lt;/p>
&lt;p>It depends on a lot of factors, you shouldn&amp;rsquo;t boldly assume that logic works with everyone, a good strategy to get your message through might be analyzing the recipient, before deciding on your means of communication.&lt;/p>
&lt;p>That&amp;rsquo;s a useful skill If you have to deal with multitude of different people, life is all about balancing things and overdoing is never wise.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><category>thoughts</category></item><item><title>Ways to return function values in C</title><link>https://hegzploit.github.io/posts/passing-values-in-c/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Fri, 25 Mar 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/passing-values-in-c/</guid><description>&lt;p>I was having a chit-chat with a friend discussing some C language shenanigans&lt;br />
when he sent me a code snippet, he wanted me fix the code and get it to work in&lt;br />
4 different ways.&lt;/p>
&lt;p>Here is the snippet:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">calc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sum=%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;mult=%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mul&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">calc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">mul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There are two main takeaways from the above snippet:&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator></item><item><title>My new blogging workflow</title><link>https://hegzploit.github.io/posts/new-ssg/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Fri, 18 Feb 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/new-ssg/</guid><description>&lt;p>I started blogging at 2020 and was using Hugo as my go-to Static Site Generator, It was pretty fast and did the job well (Jekyll yes, I&amp;rsquo;m looking you).&lt;/p>
&lt;p>The process went as follows:&lt;br />
I had two repos, one for the blog config files and the markdown sources of my posts. I then build these files using &lt;code>hugo build&lt;/code> into static HTML pages which I push to another repo that serves my blog through github pages.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator></item><item><title>Binary Exploitation Resources</title><link>https://hegzploit.github.io/posts/bof-resources/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Tue, 27 Apr 2021 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/posts/bof-resources/</guid><description>&lt;p>These are by far the best resources I have found and &lt;em>have actually tried&lt;/em> since I started learning binary exploitation.&lt;/p>
&lt;p>Don&amp;rsquo;t waste your time choosing which is the best resource, just pick one and start digging in. They are all awesome!&lt;/p>
&lt;h2 id="video">Video&lt;/h2>
&lt;ul>
&lt;li>Dr. Ali Hadi&amp;rsquo;s Offensive Software Exploitation | &lt;a href="https://www.youtube.com/playlist?list=PLCS2zI95IiNybAAQ0HL88YzwRpLXje5y6">English&lt;/a> - &lt;a href="https://www.youtube.com/playlist?list=PLCS2zI95IiNyo5AhbVIL2hVX7zhuSkOkz">Arabic&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PL_yseowcuqYIaReP8ttfr0BAxbqZ7tmhq">Nakerah Network&amp;rsquo;s BOF Playlist - Arabic (Windows)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PL-HprVjV5ZtlPqcpwmAMD3JiFW85wQiV7">Hegzploit - Arabic&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w">LiveOverflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/user/GynvaelEN">GynvaelEN&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ippsec.rocks/">Search for topics on ippsec.rocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PLLKT__MCUeix3O0DPbmuaRuR_4Hxo4m3G">The Cyber Mentor&amp;rsquo;s Playlist (Windows)&lt;/a> - &lt;a href="https://www.youtube.com/watch?v=ncBblM920jw">New Updated Video&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PLeSXUd883dhg48iGecOxvCieQas1-dsZo">PinkDraconian&amp;rsquo;s Playlist&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PL1H1sBF1VAKVg451vJ-rx0y_ZuQMHPamH">John Hammond&amp;rsquo;s Playlist&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PL1H1sBF1VAKUBfdObXv_MeS4s3n8qwgeU">John Hammond&amp;rsquo;s PicoCTF2022 Binary Exploitation Walkthroughs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=wa3sMSdLyHw&amp;amp;list=PLHUKi1UlEgOIc07Rfk2Jgb5fZbxDPec94">CryptoCat Intro to BinEx&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="full-fledged-courses">Full Fledged Courses&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://pwn.college/">Pwn College&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tc.gts3.org/cs6265/2019/tut/">Georgia Institute of Technology Course&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://guyinatuxedo.github.io/">Guyintuxedo - Nightmare&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="practice-material">Practice Material&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://exploit.education">Exploit Exercises&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picoctf.org/">picoCTF&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pwnable.tw/">pwnable.tw&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://pwnable.kr/">pwnable.kr&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ropemporium.com/">ROP Emporium&lt;/a>&lt;/li>
&lt;/ul></description><dc:creator>Yusuf Hegazy</dc:creator></item><item><title>A Journey into Mathematical Logic: Diophantus of Alexandria</title><link>https://hegzploit.github.io/posts/diophantus/</link><pubDate>Thu, 01 Apr 2021 20:19:31 +0200</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Thu, 01 Apr 2021 20:19:31 +0200</atom:modified><guid>https://hegzploit.github.io/posts/diophantus/</guid><description>&lt;p>In this series of blog posts, I will be discussing some of my favorite topics in math, It mostly falls under the domains of mathematical logic and computability theory.&lt;/p>
&lt;h2 id="diophantus-of-alexandria">Diophantus of Alexandria&lt;/h2>
&lt;p>Diophantus was a Greek mathematician that flourished around 250 AD, he is most famous for his book &amp;ldquo;Arithmetica&amp;rdquo; in which he had compiled 130 algebraic problems among thirteen books where most of their solutions were positive integers, and that&amp;rsquo;s why mathematicians call such algebraic equations as &amp;ldquo;Diophantine Equations&amp;rdquo;.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/header/diophantus_header.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>math</category></item><item><title>Leaky Pipe - 0xL4ugh CTF</title><link>https://hegzploit.github.io/writeups/leaky-pipe/</link><pubDate>Sun, 17 Jan 2021 19:07:42 +0200</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 17 Jan 2021 19:07:42 +0200</atom:modified><guid>https://hegzploit.github.io/writeups/leaky-pipe/</guid><description>&lt;p>In this challenge we recieved a binary in which we are asked to exploit and somehow retrieve the flag.&lt;br />
you can find the binary for this challenge &lt;a href="https://github.com/hegzploit/0xL4ugh-Pwn-Challs">here&lt;/a>&lt;/p>
&lt;h2 id="initial-analysis">Initial Analysis&lt;/h2>
&lt;p>We start by running the binary and checking it behavior.&lt;/p>
&lt;pre tabindex="0">&lt;code>./leaky_pipe
We have just fixed the plumbing systm, let&amp;#39;s hope there&amp;#39;s no leaks!
&amp;gt;.&amp;gt; aaaaah shiiit wtf is dat address doin here... 0x7ffde7760410
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA &amp;lt;--- our input
Segmentation fault (core dumped)
&lt;/code>&lt;/pre>&lt;p>And as we see, we can already get a segfault by spamming some A&amp;rsquo;s in the input.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><category>pwn</category></item><item><title>Trigger Happy - 0xL4ugh CTF</title><link>https://hegzploit.github.io/writeups/trigger-happy/</link><pubDate>Sat, 16 Jan 2021 16:33:49 +0200</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sat, 16 Jan 2021 16:33:49 +0200</atom:modified><guid>https://hegzploit.github.io/writeups/trigger-happy/</guid><description>&lt;p>It was the first ever pwn challenge I solve in a CTF and I really liked it hence I wanted to bring it to this CTF (you can even check my poorly written writeup for that challenge which I refuse to remove as It&amp;rsquo;s pretty awesome to look back and see how much did we grow).&lt;/p>
&lt;p>You can check my video on format string vulnerabilies as a refresher for these types of attacks (It&amp;rsquo;s in arabic tho).&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><category>pwn</category></item><item><title>Buffer Overflows for Newbies</title><link>https://hegzploit.github.io/posts/bof-for-normies/</link><pubDate>Mon, 30 Nov 2020 02:46:12 +0200</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Mon, 30 Nov 2020 02:46:12 +0200</atom:modified><guid>https://hegzploit.github.io/posts/bof-for-normies/</guid><description>&lt;p>&lt;img src="https://hegzploit.github.io/posts/bof-for-normies/header.png" alt="&amp;ldquo;A picture of a leaking bucket that contains water as an analogue to buffer overflows.&amp;rdquo;">&lt;/p>
&lt;h2 id="what-is-a-buffer-anyway">What is a Buffer anyway?&lt;/h2>
&lt;p>We can think of buffers as containers to hold our data for later use, it&amp;rsquo;s not really something specific to computer science; In fact, we have buffers in electronics, mechanics, chemistry and even politics!&lt;/p>
&lt;p>We can say that the word buffer is just a fancy name for a placeholder (temporary storage)!&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/header/bof_for_normies_header.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>My Favorite Linux Distro</title><link>https://hegzploit.github.io/posts/distro/</link><pubDate>Sun, 27 Sep 2020 23:27:38 +0200</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Sun, 27 Sep 2020 23:27:38 +0200</atom:modified><guid>https://hegzploit.github.io/posts/distro/</guid><description>&lt;p>Now, that&amp;rsquo;s a bit misleading since i have been using windows for the past 12-13 years of my keyboard smashing journey but i don&amp;rsquo;t really feel any guilt doing this, in fact windows is nothing more of a bottleneck to me &lt;em>or so have i figured later&lt;/em>.&lt;/p>
&lt;p>enough ranting, maybe this needs it&amp;rsquo;s own blog post after all &lt;em>or maybe not&lt;/em>, it&amp;rsquo;s a highly controversial topic whatsoever. Just believe me windows is pure evil.&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><category>linux</category></item><item><title>Optimizing Recursion</title><link>https://hegzploit.github.io/posts/recursion/</link><pubDate>Thu, 24 Sep 2020 15:52:30 +0200</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Thu, 24 Sep 2020 15:52:30 +0200</atom:modified><guid>https://hegzploit.github.io/posts/recursion/</guid><description>&lt;p>In this blog post i will try to explain the basic concept of recursion and then show why recursion can be so inefficient and how to optimize it using &lt;strong>Call Tail Optimization!&lt;/strong>&lt;/p>
&lt;h2 id="normal-recursion-a-factorial-example">Normal Recursion, A Factorial Example&lt;/h2>
&lt;p>Most of us tech nerds have already dealt with the good &amp;lsquo;ol recursion, let&amp;rsquo;s refresh our understanding using the iconic factorial program.&lt;br />
$$0! = 1$$&lt;br />
$$n! = n (n-1)!$$&lt;br />
Python Implementation:&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.io/images/header/recursion_header.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>Not Really AI - RA CTF</title><link>https://hegzploit.github.io/writeups/notreallyai/</link><pubDate>Mon, 08 Jun 2020 07:22:58 +0000</pubDate><author>me AT this domain (Yusuf Hegazy)</author><atom:modified>Mon, 08 Jun 2020 07:22:58 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/notreallyai/</guid><description>&lt;ul>
&lt;li>Misusage of the libc &lt;code>printf()&lt;/code> function can lead to serious information leakage and even code execution.&lt;/li>
&lt;li>when we pass one argument (for example &lt;code>printf(foo)&lt;/code>) we can:
&lt;ul>
&lt;li>leak stack addresses using &lt;code>%x&lt;/code> or &lt;code>%p&lt;/code> format specifiers.&lt;/li>
&lt;li>overwrite any pointer&amp;rsquo;s value using &lt;code>%n&lt;/code> specifier (note that we can&amp;rsquo;t overwrite plain stack addresses as the %n format specifier can only overwrite by reference and not by value)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>For more information on format strings please check &lt;a href="http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf">this awesome resource&lt;/a>&lt;/p></description><dc:creator>Yusuf Hegazy</dc:creator><category>pwn</category></item></channel></rss>