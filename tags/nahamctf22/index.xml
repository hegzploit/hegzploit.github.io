<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>NahamCTF22 on Hegzploit</title><link>https://hegzploit.github.io/tags/nahamctf22/</link><description>Recent content in NahamCTF22 on Hegzploit</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>me@hegz.me (Yusuf Hegazy)</managingEditor><webMaster>me@hegz.me (Yusuf Hegazy)</webMaster><copyright>©2023, All Rights Reserved</copyright><lastBuildDate>Sun, 01 May 2022 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://hegzploit.github.io/tags/nahamctf22/index.xml" rel="self" type="application/rss+xml"/><item><title>Babiersteps</title><link>https://hegzploit.github.io/writeups/babiersteps/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/babiersteps/</guid><description>Checksec Canary : ✘ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : Full We only care about the stack canary as we will be overflowing RIP to control execution flow, and thankfully It&amp;rsquo;s disabled.
Exploitation 1. RIP Control We overflow the binary with a cyclic pattern, however, for this being a 64-bit binary we can&amp;rsquo;t overflow RIP with a non-canonical address.
Canonical Address An address is said to be canonical in the 64-bit world when the upper 16 bits are copies of the 48th bit.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.ioimages/thumbnails/babiersteps.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Babysteps</title><link>https://hegzploit.github.io/writeups/babysteps/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/babysteps/</guid><description>Checksec It&amp;rsquo;s an aboslute mess, nothing is turned on fortunately :)
Canary : ✘ NX : ✘ PIE : ✘ Fortify : ✘ RelRO : Partial Exploitation 1. EIP Control We obtain our offset very easily in GEF.
2. Exploitation We start by analyzing the stack at the overflown state.
Looking at the registers, It appears that only two registers point to our stack. eax and esp.
We search for gadgets jumping to any of these registers.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.ioimages/thumbnails/babysteps.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Detour</title><link>https://hegzploit.github.io/writeups/detour/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/detour/</guid><description>Checksec Canary : ✓ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : ✘ RelRO is completely disabled unlike any other challenge we have encountered, this means that we have write permessions to all the relocations.
Exploitation Running the binary will let us specify an address and a value and then It will assign that value to the adderss we provided.
hegz@pop-os$ ./detour What: 1234 Where: 123123123213 Segmentation fault (core dumped) I confirmed this by analyzing the binary in ghidra, below is the decompilation.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.ioimages/thumbnails/detour.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Dweeno</title><link>https://hegzploit.github.io/writeups/dweeno/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>https://hegzploit.github.io/writeups/dweeno/</guid><description>Serial Output 00110011 00111001 00110100 00110010 00101110 00110100 01100100 01100011 00110111 01101101 01100101 01100111 01100010 00110110 00110011 01100110 01100010 01100001 00110111 01100100 01100100 01100000 00110011 01100010 00110110 01100110 00110000 01100111 00110011 01100011 01100111 01100111 00110001 01101101 01100001 00110111 00110110 00101000 Wiring Diagram Arduino Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 char * flag = &amp;#34;REDACTED&amp;#34;; String curr, first, second; int in1=29, in2=27, in3=25, in4=23; int out1=53, out2=51, out3=49, out4=47; int i; String get_output(String bits) { String output; digitalWrite(out1, ((bits[0] == &amp;#39;1&amp;#39;)?</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="https://hegzploit.github.ioimages/thumbnails/dweeno.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category><category>Hardware</category></item></channel></rss>