<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on Hegzploit</title><link>/posts/</link><description>Recent content in Posts on Hegzploit</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>me@hegz.me (Yusuf Hegazy)</managingEditor><webMaster>me@hegz.me (Yusuf Hegazy)</webMaster><copyright>©2023, All Rights Reserved</copyright><lastBuildDate>Sun, 01 May 2022 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Babiersteps</title><link>/posts/babiersteps/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>/posts/babiersteps/</guid><description>Checksec Canary : ✘ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : Full We only care about the stack canary as we will be overflowing RIP to control execution flow, and thankfully It&amp;rsquo;s disabled.
Exploitation 1. RIP Control We overflow the binary with a cyclic pattern, however, for this being a 64-bit binary we can&amp;rsquo;t overflow RIP with a non-canonical address.
Canonical Address An address is said to be canonical in the 64-bit world when the upper 16 bits are copies of the 48th bit.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/thumbnails/babiersteps.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Babysteps</title><link>/posts/babysteps/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>/posts/babysteps/</guid><description>Checksec It&amp;rsquo;s an aboslute mess, nothing is turned on fortunately :)
Canary : ✘ NX : ✘ PIE : ✘ Fortify : ✘ RelRO : Partial Exploitation 1. EIP Control We obtain our offset very easily in GEF.
2. Exploitation We start by analyzing the stack at the overflown state.
Looking at the registers, It appears that only two registers point to our stack. eax and esp.
We search for gadgets jumping to any of these registers.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/thumbnails/babysteps.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Detour</title><link>/posts/detour/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>/posts/detour/</guid><description>Checksec Canary : ✓ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : ✘ RelRO is completely disabled unlike any other challenge we have encountered, this means that we have write permessions to all the relocations.
Exploitation Running the binary will let us specify an address and a value and then It will assign that value to the adderss we provided.
hegz@pop-os$ ./detour What: 1234 Where: 123123123213 Segmentation fault (core dumped) I confirmed this by analyzing the binary in ghidra, below is the decompilation.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/thumbnails/detour.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category></item><item><title>Dweeno</title><link>/posts/dweeno/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 01 May 2022 00:00:00 +0000</atom:modified><guid>/posts/dweeno/</guid><description>Serial Output 00110011 00111001 00110100 00110010 00101110 00110100 01100100 01100011 00110111 01101101 01100101 01100111 01100010 00110110 00110011 01100110 01100010 01100001 00110111 01100100 01100100 01100000 00110011 01100010 00110110 01100110 00110000 01100111 00110011 01100011 01100111 01100111 00110001 01101101 01100001 00110111 00110110 00101000 Wiring Diagram Arduino Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 char * flag = &amp;#34;REDACTED&amp;#34;; String curr, first, second; int in1=29, in2=27, in3=25, in4=23; int out1=53, out2=51, out3=49, out4=47; int i; String get_output(String bits) { String output; digitalWrite(out1, ((bits[0] == &amp;#39;1&amp;#39;)?</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/thumbnails/dweeno.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>pwn</category><category>NahamCTF22</category><category>Hardware</category></item><item><title>Fighting counterfeit USB Flash Drives</title><link>/posts/counterfeit-usbs/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 10 Apr 2022 00:00:00 +0000</atom:modified><guid>/posts/counterfeit-usbs/</guid><description>First Impressions I was really tempted to just plug that bad boy into my main PC, but I was worried It might do something funny, I didn&amp;rsquo;t rush and instead booted a trusy old HP Pavilion I had around and booted it up, and ran a quick lsblk to list the devices connected.
We can clearly see that sdb1 with 1.9TBs of storage, but is that all?
Digging Deeper Fight Flash Fraud, or rather f3, is a suite of command line utilities that aids in detecting and verifying USB flash drives.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/thumbnails/badusb.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>Emotion and Logic</title><link>/posts/emotion-vs-logic/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 27 Mar 2022 00:00:00 +0000</atom:modified><guid>/posts/emotion-vs-logic/</guid><description>A lot of people are driven by emotions, logical thinking doesn&amp;rsquo;t always result in agreement, in fact, most people are more influenced by emotions than logic, does that make logical thinking uselss.
It depends on a lot of factors, you shouldn&amp;rsquo;t boldly assume that logic works with everyone, a good strategy to get your message through might be analyzing the recipient, before deciding on your means of communication.
That&amp;rsquo;s a useful skill If you have to deal with multitude of different people, life is all about balancing things and overdoing is never wise.</description><dc:creator>Yusuf Hegazy</dc:creator><category>thoughts</category></item><item><title>Ways to return function values in C</title><link>/posts/passing-values-in-c/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Fri, 25 Mar 2022 00:00:00 +0000</atom:modified><guid>/posts/passing-values-in-c/</guid><description>I was having a chit-chat with a friend discussing some C language shenanigans
when he sent me a code snippet, he wanted me fix the code and get it to work in
4 different ways.
Here is the snippet:
1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; void calc (int x, int y); int main(void){ int x = 10, y = 50; printf(&amp;#34;sum=%d &amp;#34;, sum); printf(&amp;#34;mult=%d&amp;#34;, mul); } void calc (int x, int y){ int sum = x + y; int mul = x * y; } There are two main takeaways from the above snippet:</description><dc:creator>Yusuf Hegazy</dc:creator></item><item><title>My new blogging workflow</title><link>/posts/new-ssg/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Fri, 18 Feb 2022 00:00:00 +0000</atom:modified><guid>/posts/new-ssg/</guid><description>I started blogging at 2020 and was using Hugo as my go-to Static Site Generator, It was pretty fast and did the job well (Jekyll yes, I&amp;rsquo;m looking you).
The process went as follows:
I had two repos, one for the blog config files and the markdown sources of my posts. I then build these files using hugo build into static HTML pages which I push to another repo that serves my blog through github pages.</description><dc:creator>Yusuf Hegazy</dc:creator></item><item><title>Binary Exploitation Resources</title><link>/posts/bof-resources/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Tue, 27 Apr 2021 00:00:00 +0000</atom:modified><guid>/posts/bof-resources/</guid><description>These are by far the best resources I have found and have actually tried since I started learning binary exploitation.
Don&amp;rsquo;t waste your time choosing which is the best resource, just pick one and start digging in. They are all awesome!
Video Dr. Ali Hadi&amp;rsquo;s Offensive Software Exploitation | English - Arabic Nakerah Network&amp;rsquo;s BOF Playlist - Arabic (Windows) Hegzploit - Arabic LiveOverflow GynvaelEN Search for topics on ippsec.rocks The Cyber Mentor&amp;rsquo;s Playlist (Windows) - New Updated Video PinkDraconian&amp;rsquo;s Playlist John Hammond&amp;rsquo;s Playlist John Hammond&amp;rsquo;s PicoCTF2022 Binary Exploitation Walkthroughs CryptoCat Intro to BinEx Full Fledged Courses Pwn College Georgia Institute of Technology Course Guyintuxedo - Nightmare Practice Material Exploit Exercises picoCTF pwnable.</description><dc:creator>Yusuf Hegazy</dc:creator></item><item><title>A Journey into Mathematical Logic: Diophantus of Alexandria</title><link>/posts/diophantus/</link><pubDate>Thu, 01 Apr 2021 20:19:31 +0200</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Thu, 01 Apr 2021 20:19:31 +0200</atom:modified><guid>/posts/diophantus/</guid><description>In this series of blog posts, I will be discussing some of my favorite topics in math, It mostly falls under the domains of mathematical logic and computability theory.
Diophantus of Alexandria Diophantus was a Greek mathematician that flourished around 250 AD, he is most famous for his book &amp;ldquo;Arithmetica&amp;rdquo; in which he had compiled 130 algebraic problems among thirteen books where most of their solutions were positive integers, and that&amp;rsquo;s why mathematicians call such algebraic equations as &amp;ldquo;Diophantine Equations&amp;rdquo;.</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/header/diophantus_header.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>math</category></item><item><title>Leaky Pipe - 0xL4ugh CTF</title><link>/posts/leaky-pipe/</link><pubDate>Sun, 17 Jan 2021 19:07:42 +0200</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 17 Jan 2021 19:07:42 +0200</atom:modified><guid>/posts/leaky-pipe/</guid><description>In this challenge we recieved a binary in which we are asked to exploit and somehow retrieve the flag.
you can find the binary for this challenge here
Initial Analysis We start by running the binary and checking it behavior.
./leaky_pipe We have just fixed the plumbing systm, let&amp;#39;s hope there&amp;#39;s no leaks! &amp;gt;.&amp;gt; aaaaah shiiit wtf is dat address doin here... 0x7ffde7760410 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA &amp;lt;--- our input Segmentation fault (core dumped) And as we see, we can already get a segfault by spamming some A&amp;rsquo;s in the input.</description><dc:creator>Yusuf Hegazy</dc:creator><category>pwn</category></item><item><title>Trigger Happy - 0xL4ugh CTF</title><link>/posts/trigger-happy/</link><pubDate>Sat, 16 Jan 2021 16:33:49 +0200</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sat, 16 Jan 2021 16:33:49 +0200</atom:modified><guid>/posts/trigger-happy/</guid><description>It was the first ever pwn challenge I solve in a CTF and I really liked it hence I wanted to bring it to this CTF (you can even check my poorly written writeup for that challenge which I refuse to remove as It&amp;rsquo;s pretty awesome to look back and see how much did we grow).
You can check my video on format string vulnerabilies as a refresher for these types of attacks (It&amp;rsquo;s in arabic tho).</description><dc:creator>Yusuf Hegazy</dc:creator><category>pwn</category></item><item><title>Buffer Overflows for Newbies</title><link>/posts/bof-for-normies/</link><pubDate>Mon, 30 Nov 2020 02:46:12 +0200</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Mon, 30 Nov 2020 02:46:12 +0200</atom:modified><guid>/posts/bof-for-normies/</guid><description>What is a Buffer anyway? We can think of buffers as containers to hold our data for later use, it&amp;rsquo;s not really something specific to computer science; In fact, we have buffers in electronics, mechanics, chemistry and even politics!
We can say that the word buffer is just a fancy name for a placeholder (temporary storage)!
Buffer in Computer Science Now, it&amp;rsquo;s time to get more technical and get to know buffers more in computer science!</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/header/bof_for_normies_header.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>My Favorite Linux Distro</title><link>/posts/distro/</link><pubDate>Sun, 27 Sep 2020 23:27:38 +0200</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Sun, 27 Sep 2020 23:27:38 +0200</atom:modified><guid>/posts/distro/</guid><description>Now, that&amp;rsquo;s a bit misleading since i have been using windows for the past 12-13 years of my keyboard smashing journey but i don&amp;rsquo;t really feel any guilt doing this, in fact windows is nothing more of a bottleneck to me or so have i figured later.
enough ranting, maybe this needs it&amp;rsquo;s own blog post after all or maybe not, it&amp;rsquo;s a highly controversial topic whatsoever. Just believe me windows is pure evil.</description><dc:creator>Yusuf Hegazy</dc:creator><category>linux</category></item><item><title>Optimizing Recursion</title><link>/posts/recursion/</link><pubDate>Thu, 24 Sep 2020 15:52:30 +0200</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Thu, 24 Sep 2020 15:52:30 +0200</atom:modified><guid>/posts/recursion/</guid><description>In this blog post i will try to explain the basic concept of recursion and then show why recursion can be so inefficient and how to optimize it using Call Tail Optimization!
Normal Recursion, A Factorial Example Most of us tech nerds have already dealt with the good &amp;lsquo;ol recursion, let&amp;rsquo;s refresh our understanding using the iconic factorial program.
$$0! = 1$$
$$n! = n (n-1)!$$
Python Implementation:
1 2 3 4 5 def fact(x): if (x==0): return 1 else: return x * fact(x-1) But python is just too mainstream and overrated, let&amp;rsquo;s use Lisp!</description><dc:creator>Yusuf Hegazy</dc:creator><media:content url="images/header/recursion_header.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>Not Really AI - RA CTF</title><link>/posts/notreallyai/</link><pubDate>Mon, 08 Jun 2020 07:22:58 +0000</pubDate><author>me@hegz.me (Yusuf Hegazy)</author><atom:modified>Mon, 08 Jun 2020 07:22:58 +0000</atom:modified><guid>/posts/notreallyai/</guid><description>Misusage of the libc printf() function can lead to serious information leakage and even code execution. when we pass one argument (for example printf(foo)) we can: leak stack addresses using %x or %p format specifiers. overwrite any pointer&amp;rsquo;s value using %n specifier (note that we can&amp;rsquo;t overwrite plain stack addresses as the %n format specifier can only overwrite by reference and not by value) For more information on format strings please check this awesome resource</description><dc:creator>Yusuf Hegazy</dc:creator><category>pwn</category></item></channel></rss>